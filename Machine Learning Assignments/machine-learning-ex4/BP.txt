for i=1:m
  %  STEP 1  : Forward Propogation
     
      a1 = [ones(1) X(m,:)];          % a1 --> 1 * 401  
      z2 = a1 * Theta1';              % (1 * 401) * (25 * 401)T -->   1 * 25
      a2 = sigmoid(z2);               % 1 * 25
      a2 = [ones(1) a2];              % 1 * 26
      z3 = a2 *  Theta2';             % (1 * 26) * (10 *26)T    -->   1 * 10 
      a3 = sigmoid(z3);               % 1 * 10
      
  % STEP 2  : Calculating Delta - back propogation
    
      delta3 = a3 - y_matrix(m,:);    % 1 *10
      
      delta2 = delta3 * Theta2(:,2:end) .* sigmoidGradient(z2);%1 * 25
      %
      %Theta Gradient Accumulation
      %
      Theta2_grad = Theta2_grad + delta3' * a2;     % (10 * 1) * (1 *26)    --> 10 * 26;
      Theta1_grad = Theta1_grad + delta2' * a1;     % (25 * 1) * (1 * 401)  --> 25 * 401;
      
endfor
      
  Theta1_grad = Theta1_grad / m;
  Theta2_grad = Theta2_grad / m;
 
% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end